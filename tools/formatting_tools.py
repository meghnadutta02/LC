"""
Formatting Agent Tools.

Tools for report formatting, citation generation, and summary creation.
Uses OpenAI for text generation.
"""

from typing import Dict, Any, List
from langchain_core.tools import tool
from langchain_openai import ChatOpenAI
from pydantic import BaseModel, Field
from datetime import datetime

from config.settings import settings
from utils.logger import setup_logger

logger = setup_logger("formatting_tools")


class FormatReportInput(BaseModel):
    """Input schema for report formatting."""
    query: str = Field(description="Research query")
    insights: List[str] = Field(description="Key insights")
    analysis: str = Field(description="Analysis summary")
    confidence: float = Field(description="Confidence score")
    num_sources: int = Field(description="Number of sources")


class GenerateCitationsInput(BaseModel):
    """Input schema for citation generation."""
    documents: List[Dict[str, Any]] = Field(description="Documents to cite")


class CreateSummaryInput(BaseModel):
    """Input schema for summary creation."""
    query: str = Field(description="Research query")
    insights: List[str] = Field(description="Key insights")
    confidence: float = Field(description="Confidence score")


@tool(args_schema=FormatReportInput)
async def format_report_tool(
    query: str,
    insights: List[str],
    analysis: str,
    confidence: float,
    num_sources: int
) -> Dict[str, Any]:
    """
    Format a comprehensive research report using OpenAI.

    Args:
        query: Research query
        insights: Key insights
        analysis: Analysis summary
        confidence: Confidence score
        num_sources: Number of sources

    Returns:
        Dictionary with formatted report
    """
    logger.info("Formatting research report")

    try:
        llm = ChatOpenAI(
            model=settings.openai_model,
            temperature=0.5,
            api_key=settings.openai_api_key
        )

        insights_text = "\n".join([f"- {insight}" for insight in insights])

        prompt = f"""Create a professional research report for:

RESEARCH QUERY: {query}

KEY FINDINGS:
{insights_text}

ANALYSIS SUMMARY:
{analysis}

Create a well-structured report with:
1. Introduction
2. Key Findings
3. Analysis
4. Conclusions

Keep it concise and professional."""

        response = await llm.ainvoke(prompt)

        # Add metadata
        report = f"""# Research Report: {query}

**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**Confidence Score:** {confidence:.1%}
**Sources Analyzed:** {num_sources}

---

{response.content}

---

*This report was generated by an AI-powered multi-agent research assistant.*
"""

        return {
            "report": report,
            "word_count": len(report.split()),
            "success": True
        }

    except Exception as e:
        logger.error(f"Report formatting error: {str(e)}")
        return {
            "report": f"# Research Report: {query}\n\nError generating report.",
            "success": False,
            "error": str(e)
        }


@tool(args_schema=GenerateCitationsInput)
def generate_citations_tool(documents: List[Dict[str, Any]]) -> Dict[str, Any]:
    """
    Generate formatted citations for documents.

    Args:
        documents: List of documents to cite

    Returns:
        Dictionary with formatted citations
    """
    logger.info(f"Generating citations for {len(documents)} documents")

    citations = []

    for i, doc in enumerate(documents, 1):
        citation = {
            "id": i,
            "title": doc.get("title", "Untitled Document"),
            "url": doc.get("source_url", "N/A"),
            "accessed": datetime.now().strftime('%Y-%m-%d'),
            "relevance": doc.get("metadata", {}).get("relevance", "medium"),
            "formatted": f"[{i}] {doc.get('title', 'Untitled')}. {doc.get('source_url', 'N/A')}. Accessed {datetime.now().strftime('%Y-%m-%d')}."
        }
        citations.append(citation)

    return {
        "citations": citations,
        "total_citations": len(citations),
        "citation_style": "informal"
    }


@tool(args_schema=CreateSummaryInput)
async def create_summary_tool(
    query: str,
    insights: List[str],
    confidence: float
) -> Dict[str, Any]:
    """
    Create an executive summary using OpenAI.

    Args:
        query: Research query
        insights: Key insights
        confidence: Confidence score

    Returns:
        Dictionary with executive summary
    """
    logger.info("Creating executive summary")

    try:
        llm = ChatOpenAI(
            model=settings.openai_model,
            temperature=0.5,
            api_key=settings.openai_api_key
        )

        insights_text = "\n".join([f"- {insight}" for insight in insights[:5]])

        prompt = f"""Create a concise executive summary (2-3 paragraphs) for:

RESEARCH QUERY: {query}

KEY INSIGHTS:
{insights_text}

CONFIDENCE: {confidence:.1%}

Write a clear, professional executive summary."""

        response = await llm.ainvoke(prompt)

        return {
            "summary": response.content,
            "length": len(response.content.split()),
            "success": True
        }

    except Exception as e:
        logger.error(f"Summary creation error: {str(e)}")
        return {
            "summary": f"Executive summary for: {query}",
            "success": False,
            "error": str(e)
        }
